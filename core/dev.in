#! @BASH@

# prefix-related directories and other stuff from configuration
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
export DEV_VERSION=@PACKAGE_VERSION@

# source our utiity function libraries
source $libdir/dev/dev_functions.sh

# get all of the paths discovered by configure
source $libdir/dev/paths.sh

# get the defaults for all of the configuration variables
source $libdir/dev/defaults.sh

# XXX hack until build system is rebuilt
source $libdir/dev/task_functions.sh

# get DEV_PROJECT_DIR
set_project_dir || exit 1

# source the project configuration
source "$DEV_PROJECT_DIR/.devrc" || exit 1

# get DEV_TASK_DIR
set_task_dir || exit 1

# source the task configuration, if possible
source_task_configuration || exit 1

# parse any options to 'dev' itself
while test ! -z "$1"
do
  case "$1" in
    -h|help) usage;;
    -v) echo "$0: version $DEV_VERSION"; exit 1;;
    -*) echo "$0: Unknown option '$1'"; exit 1;;
    *) break;;
  esac
done

# if no subcommand was given, give usage message
test $# = 0 && usage

# figure out the path of the subcommand
subcommand="$1"
shift
cmd_path="`find_subcommand $subcommand`"
test "$cmd_path" = "" && usage 

# source subcommands' utility functions
source $libdir/dev/subcommand_functions.sh

# finally, execute the subcommand
. $cmd_path

# vim:ft=sh
