#summary General architecture of Dev
#labels Featured

= Projects and Tasks =

Dev operates on two levels: project and task.  A project corresponds to a particular application or product under development, while a task represents some smaller unit of work on a project.  For example, say you are working on a patch to SWIG to add support for Erlang.  Then SWIG is the project, and the erlang patch is the task.  You may be working concurrently on other aspects of SWIG, and may also be working on other projects.

A project will usually have the following associated with it:
  * some scripts for compiling, running, testing, and so on
  * shell and text editor configuration specific to the project

== Project Directory ==
Dev assumes that you have a single parent directory for each project, containing various subdirectories.  The default settings assume that a subdirectory named {{{dev}}} is available for Dev-related files, but this can be overridden if necessary by configuration in {{{.devrc}}}.  See ProjectDirectory for more details.

== Tasks ==
A task is a subdirectory of the project directory, containing source code and any other required supporting files.  A task is described by a configuration file.  Multiple task directories can have the same file.  The term 'task' is overloaded to refer both to the task subdirectories and to the task configuration.  The usage should be clear from context.  See TaskConfiguration and TaskDirectory for more details.

= Extensions =

By itself, Dev is just a framework (see DevFramework).  DevExtensions are what make it powerful.  Extensions can provide:
 * new 'dev' subcommands
 * new [Loaders] (for loading source code into a TaskDirectory)
 * new utility functions (for use in subcommands)
 * new configuration variables