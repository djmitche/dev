#summary General architecture of Dev
#labels Featured

= Projects and Tasks =

Dev operates on two levels: project and task.  A project corresponds to a particular application or product under development, while a task represents some smaller unit of work on a project.  For example, say you are working on a patch to SWIG to add support for Erlang.  Then SWIG is the project, and the erlang patch is the task.  You may be working concurrently on other aspects of SWIG, and may also be working on other projects.

A project will usually have the following associated with it:
  * some scripts for compiling, running, testing, and so on
  * shell and text editor configuration specific to the project

== Project Directory ==
Dev assumes that you have a single parent directory for each project, containing various subdirectories.  The default settings assume that a subdirectory named {{{dev}}} is available for Dev-related files, but this can be overridden if necessary by configuration in {{{.devrc}}}.  See ProjectDirectory for more details.

== Tasks ==
A task is described by a configuration file, and may have other associated configuration information.  This information is used to manipulate the task directory for the task.   See TaskConfiguration for more details.

Each active task is also represented by a directory, in this case a subdirectory of the project directory.  The task directory contains any and all source code needed for development, as well as any temporary or working directories for compilation or test runs.  Note that it is possible to have more than one task directory for a given task.  See TaskDirectory for more details.

= Extensions =

By itself, Dev is just a framework (see DevFramework).  DevExtensions are what make it powerful.  Extensions can provide:
 * new 'dev' subcommands
 * new code-management functions (for use in TaskConfiguration)
 * new utility functions (for use in subcommands)
 * new configuration variables
